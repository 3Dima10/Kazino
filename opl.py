from aiogram import Dispatcher, Bot, executor, types
import logging
import mysql.connector
from config import user, password, host, database, admin



##############################################################################
#---------------------------------MySQL Config-------------------------------#                                                                        
##############################################################################

config = {
    'user': user,
    'password': password,
    'host': host,
    'database': database,
    'raise_on_warnings': True,
}

link = mysql.connector.connect(**config)

cursor = link.cursor()

#######################################
#--------------Config Bot-------------#
#######################################

logging.basicConfig(level=logging.INFO)
bot = Bot(token=admin)
dp = Dispatcher(bot=bot)


#########################################
#------------------Start----------------#
#########################################

@dp.message_handler(commands=["start"])
async def start(message: types.Message):

    clsr = types.ReplyKeyboardMarkup(input_field_placeholder="–ü—Ä–æ—Å–º–æ—Ç—Ä–∏–º —á–µ–∫–∏ –µ—Ç–∏—Ö –Ω–∏—á—Ç–æ–∂—ã—Å—Ç–≤", resize_keyboard=True)
    itm = types.KeyboardButton("–ß–µ–∫üßæ")
    clsr.add(itm)
    name_id = message.from_user.first_name
    await bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –º–∏—Å—Ç–µ—Ä : {name_id}", reply_markup=clsr)

###########################################
#----------------Text---------------------#
###########################################

@dp.message_handler(content_types=['text'])
async def text(message):
    if message.text == "–ß–µ–∫üßæ":
        try:
            #####SQL –ø–æ–∏—Å–∫#####

            colo = f"SELECT id FROM olata LIMIT 1;"
            cursor.execute(colo)
            result = cursor.fetchone()
            id_value = result[0]
            cursor.fetchall()
            #####################

            #####SQL –ø–æ–∏—Å–∫#####

            colo = f"SELECT name FROM olata LIMIT 1;"
            cursor.execute(colo)
            result = cursor.fetchone()
            name = result[0]
            cursor.fetchall()
            #####################

            #####SQL –ø–æ–∏—Å–∫#####

            colo = f"SELECT shot FROM olata LIMIT 1;"
            cursor.execute(colo)
            result = cursor.fetchone()
            username = result[0]
            cursor.fetchall()
            #####################

            #####SQL –ø–æ–∏—Å–∫#####

            colo = f"SELECT karta FROM olata LIMIT 1;"
            cursor.execute(colo)
            result = cursor.fetchone()
            karta = result[0]
            cursor.fetchall()
            ##################### 

            clsr = types.ReplyKeyboardMarkup(input_field_placeholder="–ü—Ä–æ—Å–º–æ—Ç—Ä–∏–º —á–µ–∫–∏ –µ—Ç–∏—Ö –Ω–∏—á—Ç–æ–∂—ã—Å—Ç–≤")
            itm = types.KeyboardButton("–ß–µ–∫üßæ")
            clsr.add(itm)

            inl = types.InlineKeyboardMarkup(row_width=1)
            inl1 = types.InlineKeyboardButton("–ü—Ä–∏–Ω—è–ªüü¢", callback_data="tru")
            inl2 = types.InlineKeyboardButton("–û—Ç–∫–∞–∑–∞–ªüü•", callback_data="folse")
            inl.add(inl1,inl2)

            await bot.send_message(message.chat.id,
                                    f"–ß–µ–∫üßæ\n"
                                    f"id:{id_value}\n"
                                    f"–ò–º—è:{name}\n"
                                    f"–°—á—ë—Ç:{username}\n"
                                    f"–ö–∞—Ä—Ç–∞:{karta}\n",
                                    reply_markup=inl)
        except:
            await bot.send_message(message.chat.id,"–ù–µ –∫—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω")

@dp.callback_query_handler(lambda query: True)
async def callback_inline(call):
    if call.message:
        if call.data == "tru":
            #####SQL –ø–æ–∏—Å–∫#####

            colo = f"SELECT id FROM olata LIMIT 1;"
            cursor.execute(colo)
            result = cursor.fetchone()
            id_value = result[0]
            cursor.fetchall()
            #####################

            #  "DELETE FROM olata WHERE `olata`.`id` = 5752970077"
            query = f"DELETE FROM olata WHERE `olata`.`id` = {id_value} ;"
            cursor.execute(query)
            link.commit()

            query = f"UPDATE users SET schot = 0 WHERE id = {id_value};"
            cursor.execute(query)
            link.commit()

            await bot.edit_message_text(chat_id=call.message.chat.id,
                            message_id=call.message.message_id,
                            text="–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ üò≠",
                            reply_markup=None,
                            parse_mode="html")

        if call.data == "folse":
            #####SQL –ø–æ–∏—Å–∫#####

            colo = f"SELECT id FROM olata LIMIT 1;"
            cursor.execute(colo)
            result = cursor.fetchone()
            id_value = result[0]
            cursor.fetchall()
            #####################

            query = f"UPDATE users SET polo = 'folse' WHERE id = {id_value};"
            cursor.execute(query)
            link.commit()
            
            query = f"DELETE FROM olata WHERE `olata`.`id` = {id_value} ;"
            cursor.execute(query)
            link.commit()

            query = f"UPDATE users SET schot = 0 WHERE id = {id_value};"
            cursor.execute(query)
            link.commit()

            await bot.edit_message_text(chat_id=call.message.chat.id,
                            message_id=call.message.message_id,
                            text="–ú–∞–º–æ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω üòÇüòÇüòÇüòÇ",
                            reply_markup=None,
                            parse_mode="html")


#################################################
#------------------–ù–∞—á–∞–ª–æ —Ä–æ–±–æ—Ç—ã----------------#
#################################################
try:
    if __name__ == "__main__":
        print("–ö–∞–∑–∏–Ω–æ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ø—Ä–æ–±–ª–µ–º –Ω–µ—Ç")
        executor.start_polling(dp, skip_updates=True)
except Exception as _ex:
    print("–û—à—ã–±–∫–∞!!!!!!!!!\n", _ex)